package component

import "templ-shadcn/internal/util"

// ButtonVariant represents the style variant of a button
type ButtonVariant string

const (
    ButtonVariantDefault     ButtonVariant = "default"
    ButtonVariantDestructive ButtonVariant = "destructive"
    ButtonVariantOutline     ButtonVariant = "outline"
    ButtonVariantSecondary   ButtonVariant = "secondary"
    ButtonVariantGhost       ButtonVariant = "ghost"
    ButtonVariantLink        ButtonVariant = "link"
)

// ButtonSize represents the size of a button
type ButtonSize string

const (
    ButtonSizeDefault ButtonSize = "default"
    ButtonSizeSm      ButtonSize = "sm"
    ButtonSizeLg      ButtonSize = "lg"
    ButtonSizeIcon    ButtonSize = "icon"
)

// ButtonProps holds the configuration for a button
type ButtonProps struct {
    Type      string
    Variant   ButtonVariant
    Size      ButtonSize
    Disabled  bool
    ClassName []string
}

// NewButtonProps creates button props with default values
func NewButtonProps() ButtonProps {
    return ButtonProps{
        Type:     "button",
        Variant:  ButtonVariantDefault,
        Size:     ButtonSizeDefault,
        Disabled: false,
    }
}

// getButtonClasses returns the appropriate CSS classes based on button variant and size
func getButtonClasses(variant ButtonVariant, size ButtonSize) string {
    // Base classes for all buttons
    baseClasses := "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
    
    // Variant-specific classes
    var variantClasses string
    switch variant {
    case ButtonVariantDefault:
        variantClasses = "bg-primary text-primary-foreground hover:bg-primary/90"
    case ButtonVariantDestructive:
        variantClasses = "bg-destructive text-destructive-foreground hover:bg-destructive/90"
    case ButtonVariantOutline:
        variantClasses = "border border-input bg-background hover:bg-accent hover:text-accent-foreground"
    case ButtonVariantSecondary:
        variantClasses = "bg-secondary text-secondary-foreground hover:bg-secondary/80"
    case ButtonVariantGhost:
        variantClasses = "hover:bg-accent hover:text-accent-foreground"
    case ButtonVariantLink:
        variantClasses = "text-primary underline-offset-4 hover:underline"
    default:
        variantClasses = "bg-primary text-primary-foreground hover:bg-primary/90"
    }
    
    // Size-specific classes
    var sizeClasses string
    switch size {
    case ButtonSizeDefault:
        sizeClasses = "h-10 px-4 py-2"
    case ButtonSizeSm:
        sizeClasses = "h-9 rounded-md px-3"
    case ButtonSizeLg:
        sizeClasses = "h-11 rounded-md px-8"
    case ButtonSizeIcon:
        sizeClasses = "h-10 w-10"
    default:
        sizeClasses = "h-10 px-4 py-2"
    }
    
    return baseClasses + " " + variantClasses + " " + sizeClasses
}

// Button renders a button with the given properties
templ Button(props ButtonProps) {
    <button
        type={ props.Type }
        disabled?={ props.Disabled }
        class={util.Cn(getButtonClasses(props.Variant, props.Size)), props.ClassName}
    >
        { children... }
    </button>
}

// SimpleButton is a convenience wrapper for common button usage
templ SimpleButton(variant ButtonVariant, size ButtonSize, className ...string) {
    @Button(ButtonProps{
        Type:      "button",
        Variant:   variant,
        Size:      size,
        Disabled:  false,
        ClassName: className,
    }) {
        { children... }
    }
}

// LinkButton creates a button that looks like a link
templ LinkButton(href string, variant ButtonVariant, size ButtonSize, className ...string) {
    <a
        href={ templ.SafeURL(href) }
        class={util.Cn(getButtonClasses(variant, size)), className}
    >
        { children... }
    </a>
}